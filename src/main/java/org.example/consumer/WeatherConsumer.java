// org/example/consumer/WeatherConsumer.java
package org.example.consumer;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.example.model.WeatherData;
import org.apache.kafka.common.errors.WakeupException;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

public class WeatherConsumer {
    private static final String TOPIC = "weather-topic";
    private static final String BOOTSTRAP_SERVERS = "localhost:29092";
    private static final String GROUP_ID = "weather-consumer-group";

    private static final ObjectMapper objectMapper = new ObjectMapper()
            .registerModule(new JavaTimeModule());

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private final Map<String, Integer> rainyDaysCount = new HashMap<>();
    private final Map<String, Double> maxTemperature = new HashMap<>();
    private final Map<String, List<Double>> cityTemperatures = new HashMap<>();
    private final List<LocalDateTime> tyumenRainyDays = new ArrayList<>();

    private int messageCount = 0;
    private final int REPORT_AFTER_MESSAGES = 50;
    private final Timer timer = new Timer();

    public static void main(String[] args) {
        new WeatherConsumer().start();
    }

    public void start() {
        Properties props = new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, GROUP_ID);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
        consumer.subscribe(Collections.singletonList(TOPIC));

        // –¢–∞–π–º–µ—Ä: –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                System.out.println("\n‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
                consumer.wakeup();
            }
        }, 60_000);

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.out.println("\n[Consumer] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
            timer.cancel();
            consumer.close();
            printFinalReport();
        }));

        try {
            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1000));
                for (ConsumerRecord<String, String> record : records) {
                    try {
                        WeatherData wd = objectMapper.readValue(record.value(), WeatherData.class);
                        processWeatherData(wd);
                        messageCount++;

                        if (messageCount % REPORT_AFTER_MESSAGES == 0) {
                            System.out.printf("\nüìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç (–ø–æ—Å–ª–µ %d —Å–æ–æ–±—â–µ–Ω–∏–π):\n", messageCount);
                            printPartialReport();
                        }
                    } catch (Exception e) {
                        System.err.println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: " + e.getMessage());
                    }
                }
            }
        } catch (WakeupException e) {
            // –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –ø—Ä–µ—Ä–≤–∞–Ω–æ —Ç–∞–π–º–µ—Ä–æ–º
        } finally {
            consumer.close();
            printFinalReport();
        }
    }

    private void processWeatherData(WeatherData wd) {
        String city = wd.getCity();

        rainyDaysCount.merge(city, "–¥–æ–∂–¥—å".equals(wd.getCondition()) ? 1 : 0, Integer::sum);
        maxTemperature.merge(city, wd.getTemperature(), Math::max);
        cityTemperatures.computeIfAbsent(city, k -> new ArrayList<>()).add(wd.getTemperature());

        if ("–¢—é–º–µ–Ω—å".equals(city) && "–¥–æ–∂–¥—å".equals(wd.getCondition())) {
            tyumenRainyDays.add(wd.getTimestamp());
        }
    }

    private void printPartialReport() {
        System.out.println("  –°–∞–º–∞—è –∂–∞—Ä–∫–∞—è –ø–æ–≥–æ–¥–∞:");
        maxTemperature.forEach((city, temp) ->
                System.out.printf("    %s: %.1f¬∞C%n", city, temp));

        System.out.println("  –î–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏:");
        rainyDaysCount.forEach((city, count) ->
                System.out.printf("    %s: %d –¥–Ω–µ–π%n", city, count));
    }

    private void printFinalReport() {
        System.out.println("\n" + new String(new char[50]).replace('\0', '='));
        System.out.println("            üå§Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –ü–û –ü–û–ì–û–î–ï");
        System.out.println(new String(new char[50]).replace('\0', '='));

        System.out.printf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d%n", messageCount);

        System.out.println("\nüî• –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:");
        maxTemperature.entrySet().stream()
                .sorted(Map.Entry.<String, Double>comparingByValue().reversed())
                .forEach(e -> System.out.printf("  %s: %.1f¬∞C%n", e.getKey(), e.getValue()));

        System.out.println("\nüåßÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π:");
        rainyDaysCount.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                .forEach(e -> System.out.printf("  %s: %d –¥–Ω–µ–π%n", e.getKey(), e.getValue()));

        System.out.println("\nüå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:");
        cityTemperatures.forEach((city, temps) -> {
            double avg = temps.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
            System.out.printf("  %s: %.1f¬∞C%n", city, avg);
        });

        // –ì—Ä–∏–±—ã –≤ –¢—é–º–µ–Ω–∏ ‚Äî –µ—Å–ª–∏ 2+ –¥–Ω—è –ø–æ–¥—Ä—è–¥ –¥–æ–∂–¥—å
        Set<LocalDateTime> rainyDates = tyumenRainyDays.stream()
                .map(dt -> dt.toLocalDate().atStartOfDay())
                .collect(Collectors.toSet());

        List<LocalDateTime> sorted = tyumenRainyDays.stream()
                .map(dt -> dt.toLocalDate().atStartOfDay())
                .distinct()
                .sorted()
                .collect(Collectors.toList()); // ‚úÖ –í–º–µ—Å—Ç–æ .toList()

        boolean hasConsecutiveRain = false;
        for (int i = 1; i < sorted.size(); i++) {
            if (sorted.get(i).toLocalDate().minusDays(1).equals(sorted.get(i - 1).toLocalDate())) {
                hasConsecutiveRain = true;
                break;
            }
        }

        System.out.println("\nüçÑ –ú–æ–∂–Ω–æ –∏–¥—Ç–∏ –∑–∞ –≥—Ä–∏–±–∞–º–∏ –≤ –¢—é–º–µ–Ω–∏? " +
                (hasConsecutiveRain ? "‚úÖ –î–∞, –±—ã–ª–∏ –ø–æ–¥—Ä—è–¥ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏!" : "‚ùå –ù–µ—Ç, –¥–æ–∂–¥–µ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."));

        System.out.println(new String(new char[50]).replace('\0', '='));
    }
}